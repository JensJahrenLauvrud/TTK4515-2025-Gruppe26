Reviewer 1:
6
- Overarching, it may be useful to split components that are unrelated to each other. In particular splitting the FSM and primary backup system would do much for both the structure and readability of the code. In addition, consider your file structure. What causes a function to belong in the utilities or primaryProcess packages?
- Have you considered how an elevator will get back any cab calls it had if it dies and comes back? As it stands it appears you only plan to backup hall calls, which does not uphold the service guarantee for cab calls. 
- Have you considered how to uphold the service guarantee and continue backing up data if the master dies? Will the slave module take over the role of the backup?
-Consider not using global variables and ensuring all functions are as pure as you can get them. In particular this relates to your use of a global elevator object and non-pure FSM functions to control the elevator, in addition to your use of a global HallCalls object. 
- Consider running more threads and passing messages between them. This is for example a logical way to split the FSM and primary-backup system; into multiple threads. Also makes it easier to avoid using the aforementioned global variables.
- Recommend reconsidering how you send messages. Using UDP allows you to broadcast repeatedly and is a potential benefit of the protocol if you choose to employ it. This would for instance allow your modules to repeatedly broadcast their worldviews and compare, rather than relying on the global checkpoint variable, in addition to being more robust when encountering packet loss. 
- Might consider using more of the code weâ€™ve received on github. This includes the hall assigner as well as the network module. It may simplify your project significantly and increase readability.

Reviewer 2:
8
- If a function is global or private should be a bit more clear. Try to use the golang convention of global functions/variables having the first letter upper case and private having lower case. Remember to group functions accordingly.
- The communication of the worldview/states could be handled in a more clear way, it is a bit hard to see the network flow between master/backup/slave. Could be an idea to group networking into its own module or package so it is easy to see how sending and reciving is handled. This way the networking functions could be made more general. 
- It could be an idea to try to make functions that can be used for different modules. Having more general functions makes the project more modular, which this project lacks a little bit.
- The utilities module is also a bit disorganized, it seems to be a place for functions with no other relevant grouping. Either include more general functions in this module which only acts as help functions for other functions or split its content into relevant other modules. For example the jsonstring.go and transmitter.go could be a part of a nettwork module.   
- Function and variable names gives a good understanding of use and functionality.
- It is good that the states are not shared between modules and each module handles its own data.
- Functions have good structure and it is easy to see the functionality.

