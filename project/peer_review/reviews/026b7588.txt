Reviewer 1:
8
-The main function clearly shows which modules the system consists of, and the initialization of threads and classes is well-defined. 
-The naming is consistent and descriptive, making navigation easier. 
-The modules appear to deal with only one subject, demonstrating good coherence.
-Well written comments clarify design decisions and complex code sections. 
-Information flows mostly in one direction, reducing the need to backtrack across modules. 
-State is generally well-structured but the use of global variable names like “e” and “s” reduces readability and makes it more difficult to track state changes. 
-Gut feeling: 9/10, as the overall system seems robust and well-designed. 

Reviewer 2:
8
seperate modules makes it easier to understand the code
rather clear modular structure
a clean-up of comments / print statements can improve maintainability
the design shows scalability 
optimalHallRequests is rather long and could maybe split into several modules? module for state management, movement simulation, order assign? for clarity
FSM seem to give clear state changes

Reviewer 3:
6
- Should have included a README.md with information about main approach and system overwview.
- It is unclear what the system approach is (e.g. Primary/Backup, P2P, circle) After scouring the entire codebase, I'm still not sure.
- Consider making a fsm.Run() function that runs the main loop in stead of running it directly in main.
- The network.go and node.go file in network module seems a bit clouded. It is difficult to extract the purpuse of both the Network func in network.go and the transmitter and receiver func in node.go. I think that these functions can be simplified using the already provided functions bcast.Transmit, bcast.Receive peers.Transmit and peers.Receive.
- The optimalHallRequest.go file in orderDistribution module consists of 20 function definitions and 18 var/type/const declarations/definitions... This is really messy, and it is difficult to extract the purpuse. Is this module for assigning orders locally, or is this a module meant for a master to distribute orders between mutiple elevators?
- function and varaiable names are not very informative. Examples are the functions performInitialMove, performSingleMove, and the variables n, s and e in fsm.go... Cleaning up the names will make it easier for both you and the reviewer to get a clear understandning of each components function.
- The timer module is okay, but it does not really add anything new other that what is already provided by the std lib "time" module in go. Thus, the module could be removed.
- At the moment, the request module seems to be unused in the system. Maybe this will be implemented later, but for now it seems a bit weird.
In general: The project still lacks major additions, but before you start with this, you should be clear on what approach you want, which modules you need, how they'd interact, and gather all types and constants in a single config file. Maybe some of the modules, functions and types can be simplified and reduced. We recommend making a README.md, where you write down your main approach, module interaction, process flow and possible improvements. Also reconsider the naming of your vars and funcs. This will make it easier for you to cope with the task and for "outsiders" reading and understanding your code.

Reviewer 4:
8
- Consider implementing goroutines for each module instead of a main for loop.
- Not much documentation, a diagram would help explain the structure of the project. The readme file is also lacking.
- There is a lot of code in a single file in orderDistribution. The main function could be moved to its own file(with maybe a few helper functions), and the rest could be separated into their own files in the same module (ex. one for the informative ones like AnyRequests and one for the action ones like performSingleMove).
- Good implementation of pure functions, using return values in most functions instead of modifying variables.
- Since you don't have a diagram and your readme does not mention it, it is not immediately obvious that your system is master-slave with your structuring of the modules. The file where this is implemented is called Node, making it hidden from immediate view.
- Mostly good and informative commenting, but a little lacking in some functions(in orderDistribution mainly).
- The fsm file is very clean and structured well, easy to read and understand, good naming, good choice of functions and functionality.

