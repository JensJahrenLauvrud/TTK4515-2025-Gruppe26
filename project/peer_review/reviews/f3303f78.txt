Reviewer 1:
8
- Excellent use of Elixir/OTP (GenServer, GenStateMachine) creating a robust foundation for a distributed system
- Well-defined state machine with clear transitions and appropriate event handlers for elevator control
- Clean supervisor tree with one-for-all restart strategy providing good fault tolerance
- Good separation of concerns with modules split into main module and Core submodule for stateless functions
- Some complex functions (like OrderManager.Core.optimal_destination) have overly complex conditional logic
- Limited project-level documentation describing the overall system architecture and design decisions
- Some state operations could lead to race conditions with limited handling of partial system failures

Reviewer 2:
7
It seems like the idea of .Core is to separate stateless logic.
This might be a difference of opinion/testability, but it seems to
produce more boilerplate and unnecessary levels of abstraction.
Example of unnecessary abstaction: def all_nodes() do [Node.self() | Node.list()] end.
The start_epmd might be a little off.
Probably it should in some way be under the main supervisor (main.ex) in some way,
or systemd. That way it can be restarted.
Some confusing usage of the term Supervisor, e.g. order_supervisor and supervision of an order.
Neither are an Elixir Supervisors.
Good job with static analysis: types and @spec.
OrderManager is clear, but it's less clear wheter it is entirely p2p, leader or master.
Functions have a reasonably amount of logic.

