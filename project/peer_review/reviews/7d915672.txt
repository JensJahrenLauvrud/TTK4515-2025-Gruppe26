Reviewer 1:
7
Bad modularization, should split code into packages, now all the code is in main.go making it hard to expand later
Mostly good naming, but some places use single-letter variable names outside of an appropriate scope
Should have a README.md or at least add how to use the code to doc.txt
Suggest using some automatic way of assigning id like either ip-address or pid-id
Missing some config file to keep track of global variables like numfloor and numbuttons
Good use of channels with descriptive names for FSM.
Overall this needs some work, a lot of the functionality should be moved out of main into smaller packages. I suggest "elevator" for fsm, requests and elevator, "hallrequests" for peer updates and "network" for a broadcaster and listener

Reviewer 2:
7
- Main is a bit crowded. There is no clear overview of how the different modules interacts from looking at the function body. Suggest handling communication in another module/function. 
- Code seems to include a lot of tests? This makes it hard to read and understand the desired functionality. For example you first try json encoding then try json decoding. Instead you can put this in a function to hide all the tests.
- You should crate packages that are separate from main package. This may be an fsm package, an elevator package and so on. 
- Channels and variables should be declared in the start of a function, then other functions and go rutines can be runned.  
- Generally quite a bit of code could be structured into functions. For example in the fsm the cases are quit long and it is hard to keep track of what is going on. This could be solved by calling smaller functions with describing names instead of large blocks of code.
- It is not obvious from the code how the elevators will send messages to each other. What are the condition for which messages are sent? If you want to send messages continiously and often you could for example do this in a seperate go routine. 
- Even though the code structure could be improved the underlying thougth of modules seems reasonable. 

Reviewer 3:
7
maybe some more modules/ seperate code more. 
main file is rather long and could be broken up, it mixes initialization, event processing and state updates
requests handling is simple and clear
thereâ€™s some duplication in state updates and FSM logic
many debug prints and commented-out code: clean-up

