Reviewer 1:
7
Key points:
    1. Good structure of main.go.
    2. Declared constant (NFloors, NButtons, MElevators) but not used in most of the code.
    3. Good implementation of the FSM logic: 
    4. Backup.go (In the documentation is said that it has to be restructured): bugs in the mergeOrders loops and race conditions for shared variables.
    5. MasterElect.go: function's logic commented, probably has to be restructured.
    6. prim.go: no mechanism to break out of the infinte loop and race conditions for shared variables.
    7. timeidle.go: nicely implemented logic to find the elevator that should clear the request but the name is not self-explanatory.
The project is generally well implemented. Has a solid logical structure for the elevator meant as an FSM, 
a well structured network and some nice logics implemented to handle edge cases as well as some key tasks, like the requests assignement.
However the Master-Slave logic has some work to be made on. The functions that constitute this scheme are confused and present
a lack of error and edge cases handling and synchronization as well as several bugs.
Regarding the design point of view there is a strong lack of comment for a code that not always presents intuitive names for the functions and
clear logic implementations.

Reviewer 2:
7
- Main is very messy. Variables and channels should be declared before any functions or gorutines are called.
- As you mentioned in your DOCUMENTATION_Summary your modules should only contain code for that module or act as a help module for other modules.
- You should include docstrings and comments to show functionality of code that is not self explanatory.
- Unclear how the system handles cases, like when an elevator connects/disconnects from the system. This is partly due to clutter in the main function. It seems that this is also because you still not have this completely implemented, but try to focus on the structure when implementing the missing functionality.
- Try to focus on writing general functions. For example create a timer module which includes all different functions related to timers.
- The overall functionality of your project seems reasonable. Try to match the moduling of your code to reflect this. 
- Currently the code is quite tracable. This might not be the case when adding code to your project, so try to keep it this way. 

Reviewer 3:
7
- Code Structure and Organization: The project is well-organized with clear separation of concerns. Each file has a specific purpose. This modularity makes the code easier to understand and maintain.
- Code Documentation: Although there is a readme file explaining the overall methods, the code lacks comments to describe the behaviour of functions. Also there are hardcoded values of ports & for loop indices that should be embedded in variables / constants.
- Error Handling: Did not find error handling concerning network communications and power losses.
- Concurrency: There is no mechanism ensuring that all goroutines are properly managed and do not lead to potential memory leaks / race conditions (mutexes)
- Code duplication: A lot of the code that changes the motor direction, turns on and off lights, closes doors, etc. could be embedded into functions to cleanup a bit the main file and reduce code duplication.
- Overall good logic: In the case where there are no network / power losses, the logic seems to be good.

Reviewer 4:
7
A lot going on in the main file, resulting in reduced readability. 
Parts of the code could be implemented as functions, to increase readability (including most of the main-function)
Channels are mainly made in the main file, which helps getting an overview over the internal communication.
Some modules deal with more than one subject. 
Not very easy to understand the pba-module, comments/documentation would help.

