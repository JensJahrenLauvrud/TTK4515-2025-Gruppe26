Reviewer 1:
9
- Great function names! It is easy to understand what the functions do based on their names. 
  However, this makes a lot of the comments describing the functions a bit redundant, as they 
  add no new information. An improvement could be to make the comments more in depth or just remove them
  when the purpose of the function is obvious. It could also be nice to use a comment system such as doxygen
  or similar to ensure that the comments provide useful information, and that they are all in the same style.
- The structure of the project is great. It is clear what each module does, and where to find specific implementations.
- The constants defined in the config.go provide descriptive names that help a lot with the readability
  of the rest of the code.
- The variables defined throughout the project have great naming. It is easy to understand what their purpose is. 
- It is easy to see how the different modules are connected through channels. This is highlighted in the readme-file,
  which is convenient.
- Some parts have yet to be implemented, such as the sending of orders from the primary to the backup with least time to serve. 
  The readme-file briefly explains what is supposed to happen when it is implemented. Based on the code they have written so far,
  they have defined most of the functions they need to make it work. No concerns about the implementation of the missing pieces.
- The understandability of each function and body of code is quite good. It is easy to understand what the code does 
  and the nesting levels are well-managed.

Reviewer 2:
8
Clear separation between elevator control and Network communication, with good implementation of fault tolerance via backup and primary communications. The usage of UDP and TCP in this case seems logical
Seems that the structural hierarchy is a bit excessive with many files distributed across many folders. It's good that there is clear separation between modules and their functions, but at this level it might just make the code harder rather than easier to work with.
Parts with commented out code, like in "clearRequestsAtFloor()" at /elevator/elevator_functions.go, makes the code harder to read.
Documentation for the code is a bit lacking and doesn't really go much into depth on how the system works together across modules.
Naming is generally quite descriptive and understandable, notwithstanding some tiny improvements in clarity like "orderToAddToLocalQueue" instead of "addToLocalQueue".
The "if" and "case" statements may be going too deep in "elevator_fsm.go" with some lines shifting quite far to the right, making the elevator behavior harder to follow.

Reviewer 3:
8
Comments are written in both Norwegian and English. Write all comments in English for consistency.
The number of floors and buttons is defined twice (N_FLOORS and NUM_FLOORS in elevator.go and config.go). It seems that NUM_FLOORS is not actually used. I suggest combining these definitions.
TimeToServeRequest is not used. I assume you have a plan for this.
The module structure is confusing. It feels like network.go, primary.go, and backup.go could be cleaner. It is hard to differentiate these files and clearly see their purpose.
Your plan is unclear. Your design choices are not obvious. Consider adding more comments on this or documenting it in the README file.
The code is tidy, with little unnecessary code, and functions are of an appropriate size.
Consider removing the function name at the start of comments. This disrupts the reading flow, and if you write a comment at the top of a function, it is already clear that the comment belongs to that function.Unnecessary libraries and files are included (Project-Resources, go.mod, Makefile, etc.).
There is no clear overview of the code, and package descriptions are inconsistent.
Some comments are redundant, while others are useful. Avoid comments where the code is self-explanatory.
The project structure is good, with clear naming conventions.
Nesting is kept at a reasonable level, making functions easy to follow.
Some Norwegian text is buried in the code/comments.
Function names are generally good, making it clear what the functions do in most cases.

Reviewer 4:
8
- Looking from main there appears to be two modules running, both using the same channels as input. 
- Handling errors before initializing the go routines is not a bad idea :) 
- Network deals with network and distributing orders, where the primary distributes orders to its 
- The files config and elevator are clean and contains only constants. 
- The RunElevatorFSM seems to be some kind of do it all module. It is a very large and complex function making it a bit hard to understand and possibly also hard to maintain. 
- I do not understand what TimeToServeRequest and why it is placed in elevator fsm. It is not used? Could this be a separate module?
- I am unsure wether the primary and the backup handles all errors correcly such as the primary falling out, as it appears to be very dependent on the primary to function. 
- Overall the code is quite good, it is easy to read and mostly understandable. There are some smaller errors as commented above, but i think they should be an easy fix. 

