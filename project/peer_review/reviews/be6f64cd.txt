Reviewer 1:
8
* the idiomatic way of utilizing loops in objects in rust is to have a .step() function
that contains everything needed to be done in one loop iteration and then have the loop
body one abstraction layer up to clearly indicate that the spawned function of the module runs perpetual code (ie: slave.rs Ln84,col9)
Ex:
slave.init();
loop{
    slave.step()
}
* I've would have liked the "root" of src contains the main files and then have the modules
in a sub-folder to reflect the abstraction layers in the file structure.
*try to use only one language for the comments ;-) 
*Mostly clear how the slave works and what happens if it does not work, the plan forwards looks good. How will the system handle a master that cannot "reboot" it self. Will the system stop until the master is back up or will another slave promote itself to master and take over the orders? 
*TCP code under inputs.rs (both slave and master) is chunky with a lot happening on a few lines with no comments so it is less readable. I'm not saying that compact code is bad, just that the more compact code need more comments (for a moment i thought that master_message_tx loop backed the message to master so the master knew the message was received). It's also not clear what happens if a packet is dropped, is that handled by the tcp module? 
*Overall comment: The structure in the code itself is clear, division of modules make sense. The use of channels in the slave module is clear, intuitive and easily readable. 
Variable naming makes the code readable and while some places needs more comments, most of the necasary code has comment however not all of them are usefull. Ex: input.rs Ln21
// Spawns threads for all the slave input channels and returns a SlaveChannels struct. 
pub fn spawn_threads_for_slave_inputs(
Sort of make sence given the function name
However the fact that slave.init() starts an infinite loop that "runs"the slave checking the floor sensor while that also happens in the slave_loop() should be explained.
I relize that here are a lot of constructive comments here but I belive that this elevator will work just fine so an 8 is appropriate 

Reviewer 2:
7
Vague/inconsistent variable names e.g. msg, duration, callbutton, nxt_order
Difficult to grasp master_loop. 16 tabs of indentation should never exists in the first place (even though you mention it *should*, s/needs to /, be refactored). 220 line match case!
Logic should mostly match file name e.g. both polling and networking in inputs; tcp.rs doesn't seem to do networking?; inputs.rs could use a more descriptive name
Code was, for the most part, ok to navigate
Reasonable amount of comments, they add value. Maybe slightly less comments?
Should the program entrypoint be rust code?

