Reviewer 1:
7
    • Unclear meaning of variable names “optimal”
    • Lacks scalability for adding more elevators. It looks like you are making a thread for each elevator in the same program, and this is probably the reason why you have assigned the functions in elevio to the Ele struct. If you instead have each elevator run its own program, some parts of your code will be simplified and the use of pointers will mostly be unnecessary.
    • Unnecessary error “handling” in network, does not resolve actual issues.
    • If the plan is to create a thread for each function in network, this will give a large interface. A solution might be to create one “main” function for the network module.
    • Mix of snake_case and camelCase in variable names, check out https://go.dev/doc/effective_go for standard conventions in Go.
    • The variable “a” is a buttonEvent, this is not clear from the naming.
    • Although we see that there is another struct called Elevator, the Ele struct should be named differently to better reflect what the struct is supposed to do.
    • The backup should be run from the same main as the primary, not as a separate program. Additionally, this will prevent the need to duplicate the elevio files.
    • The purpose of the different modules is clear, this is good.

Reviewer 2:
8
- Your finitestatemachine-file looks a bit overcomplicated and hard to maintain. 
- Hard to understand what fsm_onRequestButtonPress does and how you think. 
- Your request.go-file is tidy and maintainable. 
- Your file-system on folder level is well ordered, easy to get how you have planned the structure.
- Readable names on the functions in timer.go-file.
- Good use of comments like
// --------------- TIMER FUNCTIONS --------------- //
// --- LOCAL FUNCTIONS --- //
communicates how you think the parts is connected.
- The sender and reciver parts seems to be under progress. Looks maintainable this far, keep on with this.

Reviewer 3:
6
-Main does not give a good overview of what the system does. There are some threads and channels, but not enough to make the structure clear. If most channels and go-routines are in main it would be easier to get an overview.
-The file layout makes the overall system hard to navigate. It would be easier if the packages were more consise and less nested.
-Some of the modules/functions does not have one clear goal. E.g. the elevator_init is the FSM, it should be separate functions and modules.
-If global functions were before local functions the code would be easier to read and navigate. 
-Local functions have small initial letters and global have capital initial letters, the comments are unnecessary.
-It looks like you are going for a primary-backup solution. It is not clear from the code how this would work. E.g. with two main functions.
-Both primary and backup needs to recieve and transmit. Each elevator has its own button panel.

Reviewer 4:
7
- Long switch cases make it difficult to follow the flow of the code.
- Overall, it is a bit challenging to understand the division between primary and backup and the general folder structure. It does not seem intuitive.
- The code has little documentation.
- Good function names that explain their purpose.
- Uncertain why two elevio.go functions are needed. Having multiple receiver.go and sender.go files also makes the structure somewhat messy and difficult to understand.
- Each file has a specific responsibility.
- A configuration file for constants and variables makes the structure more organized.

