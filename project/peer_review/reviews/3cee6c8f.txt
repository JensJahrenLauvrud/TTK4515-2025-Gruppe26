Reviewer 1:
8
Try to avoid hardcoding for functionality. In hub_algo/hub/hub.go number of floors and elevators are hardcoded.
The main for-loop is somewhat chaotic. Maybe you should implement this whole for-loop in a different file and function and just run that function as a goroutine.
Try to make structs with channels for the different modules, this makes it really easy to see which channels cooperate and so on. (But if you decide to do this. Make sure you don't throw a full struct of channels as a parameter to a function unless every channel is used in there.)
The hub_algo module contains a lot of code and it is not very clear how the different parts interact.
The modules give a nice the overview of the system, but they do not seem to interact a lot yet.
Variable and function names are reasonable, overall understandability is good. 


Reviewer 2:
8
The project is well-structured and is divided into logical modules, with clear separation between networking, elevator control, and state management etc.. Their names are also self-explanatory. This improves readability and maintainability. 
Channels are well used and reduce the risk of blocking operations. 
The hub appears to be the central communication point, but it is not immediately clear how nodes confirm they have the latest state. This makes it unclear at first glance if the system is using peer-to-peer or master-slave communication.
The fsm could be created in a more structured and understandable way using switch cases. At the moment it is built up by functions where it is not obvious where they are being runned/controlled from. This makes the FSM logic hard to follow.
There are not that many comments explaining the different functions, but this is not a problem because the functions names and variable names makes it easy to understand the purpose of each function. 
No explicit acknowledgment (ACK) mechanism for state updates. SendWorldView() in elevator_network.go sends updates, but there is no verification that the message was received. A suggestion would be to add an explicit acknowledgment (ACK) mechanism for the worldview updates, or add sequence numbers to detect missing or outdated updates.
There are some duplicate imports.

Reviewer 3:
8
-It is good that functions are mostly self-describing.
-The ChooseDirection-function seems a little bit wordy, but it could be that this is the only way to do it. It is clear to understand, so thumbs up for that.
-Could have had a little more comments in the code. In the file “requests.go” there is not a single comment.
-The hub_network-file has self-explaining functions, which is good.
-The system of always having the lowest IP address node being assigned as active (master) seems like a good idea.
-It could be positive that you have many printouts, this can make bug fixing easier. However, it could lead to having too much information outputted to the terminal at once.
-All in all this seems like a good project, but a little bit more comments in some parts of the code is probably not a bad idea.

