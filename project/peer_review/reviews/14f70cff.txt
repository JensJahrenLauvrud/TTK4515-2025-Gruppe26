Reviewer 1:
8
- First impression looking at main is good. There are several go routines started and a couple of channels made. I will only comment on the fact that you have the function pollDoorTimer here, could this be moved?
- I do not understand what the backup.Backup call in main does. I get that it creates an elevator (backup elevator) but what is the function of the comment taken as input? Is this something that is supposed to be changed or something not finished?
- You have a updateWorldview function that is not used? This might just be something you are already working on but it could either be removed or used. I seems like the elevator_interface file is not finished, but i think you are headed in the right direction. 
- The distribution folder only contains files for network and communication. You could consider changing the name of this folder to network or communication or interface o.l. 
- The fsm file contains several fsm functions, it might me more intuitive to have one fsm function handling the different states and add helper functions for the rest. Now there are separate helperfunctions for different senarios. Making a single fsm function handling the states looks cleaner in main as well as it could be called as a seperate go routine. 
- Overall I think that the code is understandable and clean. The file and foldernames make sense, and the modules are distributed in a good way. Functions have good and informative names. Not to many comments, but they appear when things were unclear. 

Reviewer 2:
7
The main-file clearly initializes modules and threads. However, some functionality, such as PollDoorTimer could be moved to other modules. Additionally, NumFloors is already defined globally in elevio, so there is no need to create a new variable for it in main.
The use of large shared variables, such as currentWorldview Worldview in elevator_interface, should be minimized. Instead, the SendWorldview module should manage this variable to reduce scope and improve debugging. Furthermore, rather than sending updates every second, it should be satisfactory to transmit data only when a change occurs.
The modules are in general well defined and separated. To make the FSM more pure and readable you might move functions to a utils file. Perhaps some modules should contain more of the code, for example the requests folder which is used exclusively by the FSM. Ergo placing the functionality within the requests module within the FSM/elevatordriver.
We appreciate the comment about using channels instead of pointers for the elevator state! Should be done.
Functions are generally well written, however we found a issue concerning the RequestsShouldClearImmediately()-function. Should a order ever be cleared immediately? Can any guarantees be given?
Your FSM is not really a FSM. Combine all the FSM-functions into one FSM.

