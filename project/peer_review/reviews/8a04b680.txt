Reviewer 1:
6
 - In general there is too much logic in main (ex lines 127-149) and there is a lot of nesting in some places, try learning about some techniques to reduce this (if guard, modularity), also a function is supposed to do one thing, and one thing only. Therefore you should consider splitting updateOrAppendElevatorData and remove it from main.go. In general, you should try to increase the modularity of the code, so that logic is more separated between modules. For example, you can merge fsm and elevatorLogic, as elevatorLogic has a lot of exosed names, which are only used in fsm.go
 - The implementation of assignment.go seems to be a bit messy (for example a block of commented out code in the middle of the file). If the implementation works it only needs some cleanup, otherwise rewrite it. (If you want you can write unit tests to simplify improving the function)
 - The acknowledgement system seems to not yet be thought about or not correctly implemented. Orders are (sometimes?) sent directly to the elevator without any acknowledgement, note that this cannot work in the final elevator project as there seems to be no way to provide a guarantee of service as required by the specification.
 - You have some unnecessary comments, remove these and focus on writing self documenting code instead.
 - Overall the naming is good, but there are some unclear/verbose names, for example: updateOrAppendElevatorData, orderStatesAllElevators, CurrentOrderListAllElevators 
 - Make sure to keep the naming convention consistent. Idiomatic go uses camelCase and PascalCase for public and private variables.
 - The orderStatesAllElevators_msg struct is continuously sent into a channel in a goroutine in main, but the orderStatusAllElevators field only contains a copy of the true value when it was first initialized. This means that changing elevator states will not propagate throughout the system. Check out this example (https://go.dev/play/p/iyGnUMms0Hq)
 - Gut feeling: 4. On good track, but somewhat hard to say because the project is in a very early stage of development (E.G. backups, acknowledgements, connection loss handling etc. seems to be missing.). You've tried to implement some basic functionality, but it seems like you might not be mature enough in the go programming language, (for instance you need to change the source code in asssignment.go based on which operating system you're on), this is something you *need* to improve. Start by making the assignment function work regardless of operating system, and you should also watch Anders' lectures on code quality for a general overview of how you can structure the program (https://www.youtube.com/watch?v=6nIhDFF1D5U). 

Reviewer 2:
9
1 Clearly communicated purpose and origin of code, without the need of much commenting. I.E variable names are understandable and clear. 
2 Readily available and easily navigatable file structure.
3 The prints are informative and precise, giving good feedback to the coder when running the system.
4 They have commented that the distribution of orders is yet to be implemented. The functionality of the system is unclear because of this, other than knowing it is a plan for peer-to-peer logic . There are no order assignments, executions or backup strategy coded or commented. As this is not a stage they have arrived at yet, we are unable to assess further. 
5 The code is compact and precise. The functions have singular purposes, but are not too simple or redundant. The functions are pure.
6 In the main.go file, there is a definition for a updateOrAppendElevatorData func, which clashes with the rest of the codes form and otherwise sleek appearence.
7 The grade 9 is given to the group. We believe the project is perfectly managable for the group and continuing with this level of code makes them a good candidate for the formal requirements of grade 9.

Reviewer 3:
9
Good structure making it easy to know where to look for given parts of the system
Good coherence, as all the modules seem to deal with only one subject
It is implemented a module assigned for constants, but also other constants in other modules
The flow of the code is easy to trace
Some unclear abbreviations in variable names
Useful comments, especially in the main file
Some inconsistency in the convention for const names, as some have PascalCase (eg. EB_DoorOpen), while others have UPPER_SNAKE_CASE (eg. NUM_FLOORS)

