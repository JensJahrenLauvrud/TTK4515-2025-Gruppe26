0C25976E
6+
1. The README is copy paste chatGPT, which sets a bad first impression on your solution. Based on this and my walkthrough indicates AI generated code (AI inspired at best). Despite this I give some comments, even though I would make chatGPT do it, I do it myself.
2. Nice of you to include flowcharts, one of the few reasons I understand your code. Some good comments, but suspect them to be AI generated
3. Your naming sheme is nonexistent, or just not put much thought in (ie. world_view files, WorldView struct, what is happening in pub mod world_view {pub mod world_view} recurive mod??  )
4. State looks to be somewhat structured, but consider how you would differenciate between tasks that are new but not colective confirmed(pending) and that are confrimed. Multiple states can ease the distingusje.
5. The different datastructures seems overly intricate and intertwined. This is reflected on the multiple lines of code in for example local_networks file. Tip would be to look into #[derive(copy, clone, ... ) ]. 
6. Usin tokio to split work onto fibers is somewhat tedious, consider using "crossbeam channels" ?
7. Is serializing and deserializeing nessecary for transmitting worldview? The worldview can be sent as a plain string.

b9c3b571
6
- The code is chaotic and barely commented. You need to add comments and change the structure for other people to understand it. Ironically, the best commented part of the code is a test file which is commented in german.
- Threads are spawned in functions instead of the other way around. Most thread creations are also hidden away in auxillary files. These should all be moved to main to make the code easier to understand. Outside of the code copied from the elevator driver it seems like you only create one thread.
- I do not understand the necessity of the fsm and struct. Are you expecting to create multiple fsms or broadcasts on one PC? It's use makes the code horrible to read as nearly every line in fsm starts with self. This might work well, it just makes the functions harder to read.
- There is IMO way too much happening in the fsm thread. Almost all of the elevator functionality runs in this one thread. This should be split up and dealt with in separate threads.
- Also, while i don't quite understand how the watchdog function works, it seems unwise to be mixing arcs and tokio. I am also interested to know the reasoning behind the arc inside an option inside an mutex inside an arc. 
- The state system for the fsm is nice. It makes sense and makes the code decently understandable. But as the point above said, it should probably have some functionality split off for readability and for easier debugging.
- A few points you should look into: 
    - How do you confirm that other elevators have received an order to make sure it isn't lost? Right now there seems to be no verification of orders before they are completed. 
    - Also, how will you recover from a critical failure in one of the threads? I see that you have your watchdog, but it does not seem like any info is backed up right now. So given a panic in a thread, all the info used looks like it will be lost.
- In conclusion: It is clear that you have a lot of work to do. I can see the outline of what you want to do, but the implementation is very lacking.
- As for code quality, overall you would get a hard F from me. I should not need to work this hard to understand your code. It took me a long time to find out how you even wanted to communicate orders, and i have no idea what the broadcast functions even do currently as they do not seem to communicate with any other thread. Things that are missing should ideally be added as TODO! or at least explained in comments.

a37a0872
5/6

I find it very hard to give you a score as I find it simply insurmountable.

You code seems to have grown incredibly out of control. Trying to follow the program flow is a mess of swapping between files, modules, and I cannot believe that it is even remotely possible to try to understand the code without Ctrl-click. I have spent upwards of 10 hours on trying to understand your code and I haven't even reached the main control loop. For reference I have appended a rubric with the amount of lines in your code, there is almost 3500 lines of just rust code, when removing all whitespace and comments.

The fact that you import all functions and strucs directly makes it very hard to figure out where all the functions are coming from. It would be much easier to understand if you imported to an alias and used that instead. For instance 'crate::data_struct as datstruct' and then write like 'datstruct::CabinState' instead of just writing 'CabinState'.

Is the logging module copy pasted from somewhere else? It seems to bee way to overkill for this kind of project, it is almost 600 lines. Why does it need to work over the network? Why don't you just print to the terminal where you want to use the logging module?

The names of some functions are not really explanatory i shouldn't really have to go into the function to find out what ConnectionTransmitters::take_status() does.

It would be very good for readable if you did not have the main execution of a function is not interlaced with the entire execution loop of a new spawned thread, see messages_channels().

===============================================================================
 Language            Files        Lines         Code     Comments       Blanks
===============================================================================
 TOML                    5           43           40            0            3
-------------------------------------------------------------------------------
 Markdown                5          303            0          209           94
 |- C                    1           76           30           30           16
 (Total)                            379           30          239          110
-------------------------------------------------------------------------------
 Rust                   31         4181         3439          115          627
 |- Markdown             5           75            0           62           13
 (Total)                           4256         3439          177          640
===============================================================================
 Total                  41         4527         3479          324          724
===============================================================================


337eedef
8
- 
