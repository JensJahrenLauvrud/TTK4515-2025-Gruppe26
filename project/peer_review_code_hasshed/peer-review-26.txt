0C25976E
6+
1. The README is copy paste chatGPT, which sets a bad first impression on your solution. Based on this and my walkthrough indicates AI generated code (AI inspired at best). Despite this I give some comments, even though I would make chatGPT do it, I do it myself.
2. Nice of you to include flowcharts, one of the few reasons I understand your code. Some good comments, but suspect them to be AI generated
3. Your naming sheme is nonexistent, or just not put much thought in (ie. world_view files, WorldView struct, what is happening in pub mod world_view {pub mod world_view} recurive mod??  )
4. State looks to be somewhat structured, but consider how you would differenciate between tasks that are new but not colective confirmed(pending) and that are confrimed. Multiple states can ease the distingusje.
5. The different datastructures seems overly intricate and intertwined. This is reflected on the multiple lines of code in for example local_networks file. Tip would be to look into #[derive(copy, clone, ... ) ]. 
6. Usin tokio to split work onto fibers is somewhat tedious, consider using "crossbeam channels" ?
7. Is serializing and deserializeing nessecary for transmitting worldview? The worldview can be sent as a plain string.

b9c3b571
6
- The code is chaotic and barely commented. You need to add comments and change the structure for other people to understand it. Ironically, the best commented part of the code is a test file which is commented in german.
- Threads are spawned in functions instead of the other way around. Most thread creations are also hidden away in auxillary files. These should all be moved to main to make the code easier to understand. Outside of the code copied from the elevator driver it seems like you only create one thread.
- I do not understand the necessity of the fsm and struct. Are you expecting to create multiple fsms or broadcasts on one PC? It's use makes the code horrible to read as nearly every line in fsm starts with self. This might work well, it just makes the functions harder to read.
- There is IMO way too much happening in the fsm thread. Almost all of the elevator functionality runs in this one thread. This should be split up and dealt with in separate threads.
- Also, while i don't quite understand how the watchdog function works, it seems unwise to be mixing arcs and tokio. I am also interested to know the reasoning behind the arc inside an option inside an mutex inside an arc. 
- The state system for the fsm is nice. It makes sense and makes the code decently understandable. But as the point above said, it should probably have some functionality split off for readability and for easier debugging.
- A few points you should look into: 
    - How do you confirm that other elevators have received an order to make sure it isn't lost? Right now there seems to be no verification of orders before they are completed. 
    - Also, how will you recover from a critical failure in one of the threads? I see that you have your watchdog, but it does not seem like any info is backed up right now. So given a panic in a thread, all the info used looks like it will be lost.
- In conclusion: It is clear that you have a lot of work to do. I can see the outline of what you want to do, but the implementation is very lacking.
- As for code quality, overall you would get a hard F from me. I should not need to work this hard to understand your code. It took me a long time to find out how you even wanted to communicate orders, and i have no idea what the broadcast functions even do currently as they do not seem to communicate with any other thread. Things that are missing should ideally be added as TODO! or at least explained in comments.

337eedef
8
- 